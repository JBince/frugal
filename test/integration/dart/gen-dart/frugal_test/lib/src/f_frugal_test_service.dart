// Autogenerated by Frugal Compiler (3.17.12)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING



// ignore_for_file: unused_import
// ignore_for_file: unused_field
// ignore_for_file: invalid_null_aware_operator
import 'dart:async';
import 'dart:typed_data' show Uint8List;

import 'package:collection/collection.dart';
import 'package:thrift/thrift.dart' as thrift;
import 'package:frugal/frugal.dart' as frugal;
import 'package:w_common/disposable.dart' as disposable;

import 'package:frugal_test/frugal_test.dart' as t_frugal_test;


abstract class FFrugalTest extends t_frugal_test.FSuperService {
  Future testVoid(frugal.FContext ctx);

  Future<String?> testString(frugal.FContext ctx, String thing);

  /// Deprecated: use something else
  @deprecated
  Future<bool?> testBool(frugal.FContext ctx, bool thing);

  Future<int?> testByte(frugal.FContext ctx, int thing);

  Future<int?> testI32(frugal.FContext ctx, int thing);

  Future<int?> testI64(frugal.FContext ctx, int thing);

  Future<double?> testDouble(frugal.FContext ctx, double thing);

  Future<Uint8List?> testBinary(frugal.FContext ctx, Uint8List thing);

  Future<t_frugal_test.Xtruct?> testStruct(frugal.FContext ctx, t_frugal_test.Xtruct thing);

  Future<t_frugal_test.Xtruct2?> testNest(frugal.FContext ctx, t_frugal_test.Xtruct2 thing);

  Future<Map<int, int>?> testMap(frugal.FContext ctx, Map<int, int> thing);

  Future<Map<String, String>?> testStringMap(frugal.FContext ctx, Map<String, String> thing);

  Future<Set<int>?> testSet(frugal.FContext ctx, Set<int> thing);

  Future<List<int>?> testList(frugal.FContext ctx, List<int> thing);

  Future<int?> testEnum(frugal.FContext ctx, int thing);

  Future<int?> testTypedef(frugal.FContext ctx, int thing);

  Future<Map<int, Map<int, int>>?> testMapMap(frugal.FContext ctx, int hello);

  Future<bool?> testUppercaseMethod(frugal.FContext ctx, bool thing);

  Future<Map<int, Map<int, t_frugal_test.Insanity>>?> testInsanity(frugal.FContext ctx, t_frugal_test.Insanity argument);

  Future<t_frugal_test.Xtruct?> testMulti(frugal.FContext ctx, int arg0, int arg1, int arg2, Map<int, String> arg3, int arg4, int arg5);

  Future testException(frugal.FContext ctx, String arg);

  Future<t_frugal_test.Xtruct?> testMultiException(frugal.FContext ctx, String arg0, String arg1);

  Future testUncaughtException(frugal.FContext ctx);

  Future testUncheckedTApplicationException(frugal.FContext ctx);

  Future testRequestTooLarge(frugal.FContext ctx, Uint8List request);

  Future<Uint8List?> testResponseTooLarge(frugal.FContext ctx, Uint8List request);

  Future testOneway(frugal.FContext ctx, int millisecondsToSleep);
}

FFrugalTestClient fFrugalTestClientFactory(frugal.FServiceProvider provider, {List<frugal.Middleware>? middleware}) =>
    FFrugalTestClient(provider, middleware);

class FFrugalTestClient extends t_frugal_test.FSuperServiceClient implements FFrugalTest {
  Map<String, frugal.FMethod> _methods = {};

  FFrugalTestClient(frugal.FServiceProvider provider, [List<frugal.Middleware>? middleware])
      : this._provider = provider,
      this._transport = provider.transport,
      this._protocolFactory = provider.protocolFactory, 
        super(provider, middleware) {
    var combined = middleware ?? [];
    combined.addAll(provider.middleware);
    this._methods = {};
    this._methods['testVoid'] = frugal.FMethod(this._testVoid, 'FrugalTest', 'testVoid', combined);
    this._methods['testString'] = frugal.FMethod(this._testString, 'FrugalTest', 'testString', combined);
    this._methods['testBool'] = frugal.FMethod(this._testBool, 'FrugalTest', 'testBool', combined);
    this._methods['testByte'] = frugal.FMethod(this._testByte, 'FrugalTest', 'testByte', combined);
    this._methods['testI32'] = frugal.FMethod(this._testI32, 'FrugalTest', 'testI32', combined);
    this._methods['testI64'] = frugal.FMethod(this._testI64, 'FrugalTest', 'testI64', combined);
    this._methods['testDouble'] = frugal.FMethod(this._testDouble, 'FrugalTest', 'testDouble', combined);
    this._methods['testBinary'] = frugal.FMethod(this._testBinary, 'FrugalTest', 'testBinary', combined);
    this._methods['testStruct'] = frugal.FMethod(this._testStruct, 'FrugalTest', 'testStruct', combined);
    this._methods['testNest'] = frugal.FMethod(this._testNest, 'FrugalTest', 'testNest', combined);
    this._methods['testMap'] = frugal.FMethod(this._testMap, 'FrugalTest', 'testMap', combined);
    this._methods['testStringMap'] = frugal.FMethod(this._testStringMap, 'FrugalTest', 'testStringMap', combined);
    this._methods['testSet'] = frugal.FMethod(this._testSet, 'FrugalTest', 'testSet', combined);
    this._methods['testList'] = frugal.FMethod(this._testList, 'FrugalTest', 'testList', combined);
    this._methods['testEnum'] = frugal.FMethod(this._testEnum, 'FrugalTest', 'testEnum', combined);
    this._methods['testTypedef'] = frugal.FMethod(this._testTypedef, 'FrugalTest', 'testTypedef', combined);
    this._methods['testMapMap'] = frugal.FMethod(this._testMapMap, 'FrugalTest', 'testMapMap', combined);
    this._methods['testUppercaseMethod'] = frugal.FMethod(this._testUppercaseMethod, 'FrugalTest', 'testUppercaseMethod', combined);
    this._methods['testInsanity'] = frugal.FMethod(this._testInsanity, 'FrugalTest', 'testInsanity', combined);
    this._methods['testMulti'] = frugal.FMethod(this._testMulti, 'FrugalTest', 'testMulti', combined);
    this._methods['testException'] = frugal.FMethod(this._testException, 'FrugalTest', 'testException', combined);
    this._methods['testMultiException'] = frugal.FMethod(this._testMultiException, 'FrugalTest', 'testMultiException', combined);
    this._methods['testUncaughtException'] = frugal.FMethod(this._testUncaughtException, 'FrugalTest', 'testUncaughtException', combined);
    this._methods['testUncheckedTApplicationException'] = frugal.FMethod(this._testUncheckedTApplicationException, 'FrugalTest', 'testUncheckedTApplicationException', combined);
    this._methods['testRequestTooLarge'] = frugal.FMethod(this._testRequestTooLarge, 'FrugalTest', 'testRequestTooLarge', combined);
    this._methods['testResponseTooLarge'] = frugal.FMethod(this._testResponseTooLarge, 'FrugalTest', 'testResponseTooLarge', combined);
    this._methods['testOneway'] = frugal.FMethod(this._testOneway, 'FrugalTest', 'testOneway', combined);
  }

  frugal.FServiceProvider _provider;
  frugal.FTransport _transport;
  frugal.FProtocolFactory _protocolFactory;

  @override
  Future<Null> onDispose() async {
    if (!_provider.isOrWillBeDisposed)  {
      return _provider.dispose();
    }
    return null;
  }

  @override
  Future testVoid(frugal.FContext ctx) {
    return this._methods['testVoid']!([ctx]);
  }

  Future _testVoid(frugal.FContext ctx) async {
    final args = testVoid_args();
    final message = frugal.prepareMessage(ctx, 'testVoid', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testVoid_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
  }
  @override
  Future<String?> testString(frugal.FContext ctx, String thing) {
    return this._methods['testString']!([ctx, thing]).then((value) => value as String);
  }

  Future<String?> _testString(frugal.FContext ctx, String thing) async {
    final args = testString_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testString', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testString_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testString failed: unknown result'
    );
  }
  /// Deprecated: use something else
  @deprecated
  @override
  Future<bool?> testBool(frugal.FContext ctx, bool thing) {
    return this._methods['testBool']!([ctx, thing]).then((value) => value as bool);
  }

  Future<bool?> _testBool(frugal.FContext ctx, bool thing) async {
    final args = testBool_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testBool', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testBool_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testBool failed: unknown result'
    );
  }
  @override
  Future<int?> testByte(frugal.FContext ctx, int thing) {
    return this._methods['testByte']!([ctx, thing]).then((value) => value as int);
  }

  Future<int?> _testByte(frugal.FContext ctx, int thing) async {
    final args = testByte_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testByte', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testByte_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testByte failed: unknown result'
    );
  }
  @override
  Future<int?> testI32(frugal.FContext ctx, int thing) {
    return this._methods['testI32']!([ctx, thing]).then((value) => value as int);
  }

  Future<int?> _testI32(frugal.FContext ctx, int thing) async {
    final args = testI32_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testI32', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testI32_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testI32 failed: unknown result'
    );
  }
  @override
  Future<int?> testI64(frugal.FContext ctx, int thing) {
    return this._methods['testI64']!([ctx, thing]).then((value) => value as int);
  }

  Future<int?> _testI64(frugal.FContext ctx, int thing) async {
    final args = testI64_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testI64', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testI64_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testI64 failed: unknown result'
    );
  }
  @override
  Future<double?> testDouble(frugal.FContext ctx, double thing) {
    return this._methods['testDouble']!([ctx, thing]).then((value) => value as double);
  }

  Future<double?> _testDouble(frugal.FContext ctx, double thing) async {
    final args = testDouble_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testDouble', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testDouble_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testDouble failed: unknown result'
    );
  }
  @override
  Future<Uint8List?> testBinary(frugal.FContext ctx, Uint8List thing) {
    return this._methods['testBinary']!([ctx, thing]).then((value) => value as Uint8List);
  }

  Future<Uint8List?> _testBinary(frugal.FContext ctx, Uint8List thing) async {
    final args = testBinary_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testBinary', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testBinary_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testBinary failed: unknown result'
    );
  }
  @override
  Future<t_frugal_test.Xtruct?> testStruct(frugal.FContext ctx, t_frugal_test.Xtruct thing) {
    return this._methods['testStruct']!([ctx, thing]).then((value) => value as t_frugal_test.Xtruct);
  }

  Future<t_frugal_test.Xtruct?> _testStruct(frugal.FContext ctx, t_frugal_test.Xtruct thing) async {
    final args = testStruct_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testStruct', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testStruct_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testStruct failed: unknown result'
    );
  }
  @override
  Future<t_frugal_test.Xtruct2?> testNest(frugal.FContext ctx, t_frugal_test.Xtruct2 thing) {
    return this._methods['testNest']!([ctx, thing]).then((value) => value as t_frugal_test.Xtruct2);
  }

  Future<t_frugal_test.Xtruct2?> _testNest(frugal.FContext ctx, t_frugal_test.Xtruct2 thing) async {
    final args = testNest_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testNest', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testNest_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testNest failed: unknown result'
    );
  }
  @override
  Future<Map<int, int>?> testMap(frugal.FContext ctx, Map<int, int> thing) {
    return this._methods['testMap']!([ctx, thing]).then((value) => value as Map<int, int>);
  }

  Future<Map<int, int>?> _testMap(frugal.FContext ctx, Map<int, int> thing) async {
    final args = testMap_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testMap', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testMap_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testMap failed: unknown result'
    );
  }
  @override
  Future<Map<String, String>?> testStringMap(frugal.FContext ctx, Map<String, String> thing) {
    return this._methods['testStringMap']!([ctx, thing]).then((value) => value as Map<String, String>);
  }

  Future<Map<String, String>?> _testStringMap(frugal.FContext ctx, Map<String, String> thing) async {
    final args = testStringMap_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testStringMap', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testStringMap_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testStringMap failed: unknown result'
    );
  }
  @override
  Future<Set<int>?> testSet(frugal.FContext ctx, Set<int> thing) {
    return this._methods['testSet']!([ctx, thing]).then((value) => value as Set<int>);
  }

  Future<Set<int>?> _testSet(frugal.FContext ctx, Set<int> thing) async {
    final args = testSet_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testSet', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testSet_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testSet failed: unknown result'
    );
  }
  @override
  Future<List<int>?> testList(frugal.FContext ctx, List<int> thing) {
    return this._methods['testList']!([ctx, thing]).then((value) => value as List<int>);
  }

  Future<List<int>?> _testList(frugal.FContext ctx, List<int> thing) async {
    final args = testList_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testList', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testList_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testList failed: unknown result'
    );
  }
  @override
  Future<int?> testEnum(frugal.FContext ctx, int thing) {
    return this._methods['testEnum']!([ctx, thing]).then((value) => value as int);
  }

  Future<int?> _testEnum(frugal.FContext ctx, int thing) async {
    final args = testEnum_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testEnum', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testEnum_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testEnum failed: unknown result'
    );
  }
  @override
  Future<int?> testTypedef(frugal.FContext ctx, int thing) {
    return this._methods['testTypedef']!([ctx, thing]).then((value) => value as int);
  }

  Future<int?> _testTypedef(frugal.FContext ctx, int thing) async {
    final args = testTypedef_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testTypedef', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testTypedef_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testTypedef failed: unknown result'
    );
  }
  @override
  Future<Map<int, Map<int, int>>?> testMapMap(frugal.FContext ctx, int hello) {
    return this._methods['testMapMap']!([ctx, hello]).then((value) => value as Map<int, Map<int, int>>);
  }

  Future<Map<int, Map<int, int>>?> _testMapMap(frugal.FContext ctx, int hello) async {
    final args = testMapMap_args();
    args.hello = hello;
    final message = frugal.prepareMessage(ctx, 'testMapMap', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testMapMap_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testMapMap failed: unknown result'
    );
  }
  @override
  Future<bool?> testUppercaseMethod(frugal.FContext ctx, bool thing) {
    return this._methods['testUppercaseMethod']!([ctx, thing]).then((value) => value as bool);
  }

  Future<bool?> _testUppercaseMethod(frugal.FContext ctx, bool thing) async {
    final args = TestUppercaseMethod_args();
    args.thing = thing;
    final message = frugal.prepareMessage(ctx, 'testUppercaseMethod', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = TestUppercaseMethod_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testUppercaseMethod failed: unknown result'
    );
  }
  @override
  Future<Map<int, Map<int, t_frugal_test.Insanity>>?> testInsanity(frugal.FContext ctx, t_frugal_test.Insanity argument) {
    return this._methods['testInsanity']!([ctx, argument]).then((value) => value as Map<int, Map<int, t_frugal_test.Insanity>>);
  }

  Future<Map<int, Map<int, t_frugal_test.Insanity>>?> _testInsanity(frugal.FContext ctx, t_frugal_test.Insanity argument) async {
    final args = testInsanity_args();
    args.argument = argument;
    final message = frugal.prepareMessage(ctx, 'testInsanity', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testInsanity_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testInsanity failed: unknown result'
    );
  }
  @override
  Future<t_frugal_test.Xtruct?> testMulti(frugal.FContext ctx, int arg0, int arg1, int arg2, Map<int, String> arg3, int arg4, int arg5) {
    return this._methods['testMulti']!([ctx, arg0, arg1, arg2, arg3, arg4, arg5]).then((value) => value as t_frugal_test.Xtruct);
  }

  Future<t_frugal_test.Xtruct?> _testMulti(frugal.FContext ctx, int arg0, int arg1, int arg2, Map<int, String> arg3, int arg4, int arg5) async {
    final args = testMulti_args();
    args.arg0 = arg0;
    args.arg1 = arg1;
    args.arg2 = arg2;
    args.arg3 = arg3;
    args.arg4 = arg4;
    args.arg5 = arg5;
    final message = frugal.prepareMessage(ctx, 'testMulti', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testMulti_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testMulti failed: unknown result'
    );
  }
  @override
  Future testException(frugal.FContext ctx, String arg) {
    return this._methods['testException']!([ctx, arg]);
  }

  Future _testException(frugal.FContext ctx, String arg) async {
    final args = testException_args();
    args.arg = arg;
    final message = frugal.prepareMessage(ctx, 'testException', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testException_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.err1 != null) {
      throw result.err1!;
    }
  }
  @override
  Future<t_frugal_test.Xtruct?> testMultiException(frugal.FContext ctx, String arg0, String arg1) {
    return this._methods['testMultiException']!([ctx, arg0, arg1]).then((value) => value as t_frugal_test.Xtruct);
  }

  Future<t_frugal_test.Xtruct?> _testMultiException(frugal.FContext ctx, String arg0, String arg1) async {
    final args = testMultiException_args();
    args.arg0 = arg0;
    args.arg1 = arg1;
    final message = frugal.prepareMessage(ctx, 'testMultiException', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testMultiException_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    if (result.err1 != null) {
      throw result.err1!;
    }
    if (result.err2 != null) {
      throw result.err2!;
    }
    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testMultiException failed: unknown result'
    );
  }
  @override
  Future testUncaughtException(frugal.FContext ctx) {
    return this._methods['testUncaughtException']!([ctx]);
  }

  Future _testUncaughtException(frugal.FContext ctx) async {
    final args = testUncaughtException_args();
    final message = frugal.prepareMessage(ctx, 'testUncaughtException', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testUncaughtException_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
  }
  @override
  Future testUncheckedTApplicationException(frugal.FContext ctx) {
    return this._methods['testUncheckedTApplicationException']!([ctx]);
  }

  Future _testUncheckedTApplicationException(frugal.FContext ctx) async {
    final args = testUncheckedTApplicationException_args();
    final message = frugal.prepareMessage(ctx, 'testUncheckedTApplicationException', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testUncheckedTApplicationException_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
  }
  @override
  Future testRequestTooLarge(frugal.FContext ctx, Uint8List request) {
    return this._methods['testRequestTooLarge']!([ctx, request]);
  }

  Future _testRequestTooLarge(frugal.FContext ctx, Uint8List request) async {
    final args = testRequestTooLarge_args();
    args.request = request;
    final message = frugal.prepareMessage(ctx, 'testRequestTooLarge', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testRequestTooLarge_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
  }
  @override
  Future<Uint8List?> testResponseTooLarge(frugal.FContext ctx, Uint8List request) {
    return this._methods['testResponseTooLarge']!([ctx, request]).then((value) => value as Uint8List);
  }

  Future<Uint8List?> _testResponseTooLarge(frugal.FContext ctx, Uint8List request) async {
    final args = testResponseTooLarge_args();
    args.request = request;
    final message = frugal.prepareMessage(ctx, 'testResponseTooLarge', args, thrift.TMessageType.CALL, _protocolFactory, _transport.requestSizeLimit!);
    var response = (await _transport.request(ctx, message))!;

    final result = testResponseTooLarge_result();
    frugal.processReply(ctx, result, response, _protocolFactory);
    if (result.success != null) {
      return result.success;
    }

    throw thrift.TApplicationError(
      frugal.FrugalTApplicationErrorType.MISSING_RESULT, 'testResponseTooLarge failed: unknown result'
    );
  }
  @override
  Future testOneway(frugal.FContext ctx, int millisecondsToSleep) {
    return this._methods['testOneway']!([ctx, millisecondsToSleep]);
  }

  Future _testOneway(frugal.FContext ctx, int millisecondsToSleep) async {
    final args = testOneway_args();
    args.millisecondsToSleep = millisecondsToSleep;
    final message = frugal.prepareMessage(ctx, 'testOneway', args, thrift.TMessageType.ONEWAY, _protocolFactory, _transport.requestSizeLimit!);
    await _transport.oneway(ctx, message);
  }

}

// ignore: camel_case_types
class testVoid_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testVoid_args');



  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testVoid_result extends frugal.FGeneratedArgsResultBase {


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testString_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testString_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.STRING, 1);

  String? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem0 = thing!;
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeString(elem0);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
    // check for required fields
    if (this.thing == null) {
      throw thrift.TProtocolError(thrift.TProtocolErrorType.INVALID_DATA, "Required field 'thing' was not present in struct testString_args");
    }
  }
}
// ignore: camel_case_types
class testString_result extends frugal.FGeneratedArgsResultBase {
  String? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRING) {
            this.success = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testBool_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testBool_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.BOOL, 1);

  bool? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem1 = thing;
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeBool(elem1);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testBool_result extends frugal.FGeneratedArgsResultBase {
  bool? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.BOOL) {
            this.success = iprot.readBool();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testByte_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testByte_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.BYTE, 1);

  int? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem2 = thing;
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeByte(elem2);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testByte_result extends frugal.FGeneratedArgsResultBase {
  int? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.BYTE) {
            this.success = iprot.readByte();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testI32_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testI32_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.I32, 1);

  int? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem3 = thing;
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeI32(elem3);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testI32_result extends frugal.FGeneratedArgsResultBase {
  int? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.I32) {
            this.success = iprot.readI32();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testI64_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testI64_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.I64, 1);

  int? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem4 = thing;
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeI64(elem4);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testI64_result extends frugal.FGeneratedArgsResultBase {
  int? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.I64) {
            this.success = iprot.readI64();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testDouble_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testDouble_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.DOUBLE, 1);

  double? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem5 = thing;
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeDouble(elem5);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testDouble_result extends frugal.FGeneratedArgsResultBase {
  double? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.DOUBLE) {
            this.success = iprot.readDouble();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testBinary_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testBinary_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.STRING, 1);

  Uint8List? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem6 = thing;
    if (elem6 != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      oprot.writeBinary(elem6);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testBinary_result extends frugal.FGeneratedArgsResultBase {
  Uint8List? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRING) {
            this.success = iprot.readBinary();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testStruct_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testStruct_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.STRUCT, 1);

  t_frugal_test.Xtruct? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem7 = thing;
    if (elem7 != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      elem7.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testStruct_result extends frugal.FGeneratedArgsResultBase {
  t_frugal_test.Xtruct? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRUCT) {
            final elem8 = t_frugal_test.Xtruct();
            this.success = elem8;
            elem8.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testNest_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testNest_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.STRUCT, 1);

  t_frugal_test.Xtruct2? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem9 = thing;
    if (elem9 != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      elem9.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testNest_result extends frugal.FGeneratedArgsResultBase {
  t_frugal_test.Xtruct2? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRUCT) {
            final elem10 = t_frugal_test.Xtruct2();
            this.success = elem10;
            elem10.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMap_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testMap_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.MAP, 1);

  Map<int, int>? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem11 = thing;
    if (elem11 != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      oprot.writeMapBegin(thrift.TMap(thrift.TType.I32, thrift.TType.I32, elem11.length));
      for(var entry in elem11.entries) {
        oprot.writeI32(entry.key);
        oprot.writeI32(entry.value);
      }
      oprot.writeMapEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMap_result extends frugal.FGeneratedArgsResultBase {
  Map<int, int>? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem12 = iprot.readMapBegin();
            final elem15 = <int, int>{};
            for(int elem14 = 0; elem14 < elem12.length; ++elem14) {
              int elem16 = iprot.readI32();
              int elem13 = iprot.readI32();
              elem15[elem16] = elem13;
            }
            iprot.readMapEnd();
            this.success = elem15;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testStringMap_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testStringMap_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.MAP, 1);

  Map<String, String>? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem17 = thing;
    if (elem17 != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      oprot.writeMapBegin(thrift.TMap(thrift.TType.STRING, thrift.TType.STRING, elem17.length));
      for(var entry in elem17.entries) {
        oprot.writeString(entry.key);
        oprot.writeString(entry.value);
      }
      oprot.writeMapEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testStringMap_result extends frugal.FGeneratedArgsResultBase {
  Map<String, String>? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem18 = iprot.readMapBegin();
            final elem21 = <String, String>{};
            for(int elem20 = 0; elem20 < elem18.length; ++elem20) {
              String elem22 = iprot.readString();
              String elem19 = iprot.readString();
              elem21[elem22] = elem19;
            }
            iprot.readMapEnd();
            this.success = elem21;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testSet_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testSet_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.SET, 1);

  Set<int>? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem23 = thing;
    if (elem23 != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      oprot.writeSetBegin(thrift.TSet(thrift.TType.I32, elem23.length));
      for(var elem24 in elem23) {
        oprot.writeI32(elem24);
      }
      oprot.writeSetEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testSet_result extends frugal.FGeneratedArgsResultBase {
  Set<int>? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.SET) {
            thrift.TSet elem25 = iprot.readSetBegin();
            final elem28 = <int>{};
            for(int elem27 = 0; elem27 < elem25.length; ++elem27) {
              int elem26 = iprot.readI32();
              elem28.add(elem26);
            }
            iprot.readSetEnd();
            this.success = elem28;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testList_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testList_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.LIST, 1);

  List<int>? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem29 = thing;
    if (elem29 != null) {
      oprot.writeFieldBegin(_THING_FIELD_DESC);
      oprot.writeListBegin(thrift.TList(thrift.TType.I32, elem29.length));
      for(var elem30 in elem29) {
        oprot.writeI32(elem30);
      }
      oprot.writeListEnd();
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testList_result extends frugal.FGeneratedArgsResultBase {
  List<int>? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.LIST) {
            thrift.TList elem31 = iprot.readListBegin();
            final elem34 = <int>[];
            for(int elem33 = 0; elem33 < elem31.length; ++elem33) {
              int elem32 = iprot.readI32();
              elem34.add(elem32);
            }
            iprot.readListEnd();
            this.success = elem34;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testEnum_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testEnum_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.I32, 1);

  /// [t_frugal_test.Numberz]
  int? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem35 = thing;
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeI32(t_frugal_test.serializeNumberz(elem35));
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testEnum_result extends frugal.FGeneratedArgsResultBase {
  /// [t_frugal_test.Numberz]
  int? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.I32) {
            this.success = t_frugal_test.deserializeNumberz(iprot.readI32());
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testTypedef_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testTypedef_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.I64, 1);

  int? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem36 = thing;
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeI64(elem36);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testTypedef_result extends frugal.FGeneratedArgsResultBase {
  int? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.I64) {
            this.success = iprot.readI64();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMapMap_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testMapMap_args');
  static final thrift.TField _HELLO_FIELD_DESC = thrift.TField('hello', thrift.TType.I32, 1);

  int? hello;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem37 = hello;
    oprot.writeFieldBegin(_HELLO_FIELD_DESC);
    oprot.writeI32(elem37);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMapMap_result extends frugal.FGeneratedArgsResultBase {
  Map<int, Map<int, int>>? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem38 = iprot.readMapBegin();
            final elem45 = <int, Map<int, int>>{};
            for(int elem44 = 0; elem44 < elem38.length; ++elem44) {
              int elem46 = iprot.readI32();
              thrift.TMap elem40 = iprot.readMapBegin();
              final elem39 = <int, int>{};
              for(int elem42 = 0; elem42 < elem40.length; ++elem42) {
                int elem43 = iprot.readI32();
                int elem41 = iprot.readI32();
                elem39[elem43] = elem41;
              }
              iprot.readMapEnd();
              elem45[elem46] = elem39;
            }
            iprot.readMapEnd();
            this.success = elem45;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class TestUppercaseMethod_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('TestUppercaseMethod_args');
  static final thrift.TField _THING_FIELD_DESC = thrift.TField('thing', thrift.TType.BOOL, 1);

  bool? thing;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem47 = thing;
    oprot.writeFieldBegin(_THING_FIELD_DESC);
    oprot.writeBool(elem47);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class TestUppercaseMethod_result extends frugal.FGeneratedArgsResultBase {
  bool? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.BOOL) {
            this.success = iprot.readBool();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testInsanity_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testInsanity_args');
  static final thrift.TField _ARGUMENT_FIELD_DESC = thrift.TField('argument', thrift.TType.STRUCT, 1);

  t_frugal_test.Insanity? argument;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem48 = argument;
    if (elem48 != null) {
      oprot.writeFieldBegin(_ARGUMENT_FIELD_DESC);
      elem48.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testInsanity_result extends frugal.FGeneratedArgsResultBase {
  Map<int, Map<int, t_frugal_test.Insanity>>? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem49 = iprot.readMapBegin();
            final elem57 = <int, Map<int, t_frugal_test.Insanity>>{};
            for(int elem56 = 0; elem56 < elem49.length; ++elem56) {
              int elem58 = iprot.readI64();
              thrift.TMap elem51 = iprot.readMapBegin();
              final elem50 = <int, t_frugal_test.Insanity>{};
              for(int elem54 = 0; elem54 < elem51.length; ++elem54) {
                int elem55 = t_frugal_test.deserializeNumberz(iprot.readI32());
                final elem53 = t_frugal_test.Insanity();
                t_frugal_test.Insanity elem52 = elem53;
                elem53.read(iprot);
                elem50[elem55] = elem52;
              }
              iprot.readMapEnd();
              elem57[elem58] = elem50;
            }
            iprot.readMapEnd();
            this.success = elem57;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMulti_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testMulti_args');
  static final thrift.TField _ARG0_FIELD_DESC = thrift.TField('arg0', thrift.TType.BYTE, 1);
  static final thrift.TField _ARG1_FIELD_DESC = thrift.TField('arg1', thrift.TType.I32, 2);
  static final thrift.TField _ARG2_FIELD_DESC = thrift.TField('arg2', thrift.TType.I64, 3);
  static final thrift.TField _ARG3_FIELD_DESC = thrift.TField('arg3', thrift.TType.MAP, 4);
  static final thrift.TField _ARG4_FIELD_DESC = thrift.TField('arg4', thrift.TType.I32, 5);
  static final thrift.TField _ARG5_FIELD_DESC = thrift.TField('arg5', thrift.TType.I64, 6);

  int? arg0;
  int? arg1;
  int? arg2;
  Map<int, String>? arg3;
  /// [t_frugal_test.Numberz]
  int? arg4;
  int? arg5;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem59 = arg0;
    oprot.writeFieldBegin(_ARG0_FIELD_DESC);
    oprot.writeByte(elem59);
    oprot.writeFieldEnd();
    final elem60 = arg1;
    oprot.writeFieldBegin(_ARG1_FIELD_DESC);
    oprot.writeI32(elem60);
    oprot.writeFieldEnd();
    final elem61 = arg2;
    oprot.writeFieldBegin(_ARG2_FIELD_DESC);
    oprot.writeI64(elem61);
    oprot.writeFieldEnd();
    final elem62 = arg3;
    if (elem62 != null) {
      oprot.writeFieldBegin(_ARG3_FIELD_DESC);
      oprot.writeMapBegin(thrift.TMap(thrift.TType.I16, thrift.TType.STRING, elem62.length));
      for(var entry in elem62.entries) {
        oprot.writeI16(entry.key);
        oprot.writeString(entry.value);
      }
      oprot.writeMapEnd();
      oprot.writeFieldEnd();
    }
    final elem63 = arg4;
    oprot.writeFieldBegin(_ARG4_FIELD_DESC);
    oprot.writeI32(t_frugal_test.serializeNumberz(elem63));
    oprot.writeFieldEnd();
    final elem64 = arg5;
    oprot.writeFieldBegin(_ARG5_FIELD_DESC);
    oprot.writeI64(elem64);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMulti_result extends frugal.FGeneratedArgsResultBase {
  t_frugal_test.Xtruct? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRUCT) {
            final elem65 = t_frugal_test.Xtruct();
            this.success = elem65;
            elem65.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testException_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testException_args');
  static final thrift.TField _ARG_FIELD_DESC = thrift.TField('arg', thrift.TType.STRING, 1);

  String? arg;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem66 = arg;
    if (elem66 != null) {
      oprot.writeFieldBegin(_ARG_FIELD_DESC);
      oprot.writeString(elem66);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testException_result extends frugal.FGeneratedArgsResultBase {
  t_frugal_test.Xception? err1;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 1:
          if (field.type == thrift.TType.STRUCT) {
            final elem67 = t_frugal_test.Xception();
            this.err1 = elem67;
            elem67.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMultiException_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testMultiException_args');
  static final thrift.TField _ARG0_FIELD_DESC = thrift.TField('arg0', thrift.TType.STRING, 1);
  static final thrift.TField _ARG1_FIELD_DESC = thrift.TField('arg1', thrift.TType.STRING, 2);

  String? arg0;
  String? arg1;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem68 = arg0;
    if (elem68 != null) {
      oprot.writeFieldBegin(_ARG0_FIELD_DESC);
      oprot.writeString(elem68);
      oprot.writeFieldEnd();
    }
    final elem69 = arg1;
    if (elem69 != null) {
      oprot.writeFieldBegin(_ARG1_FIELD_DESC);
      oprot.writeString(elem69);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testMultiException_result extends frugal.FGeneratedArgsResultBase {
  t_frugal_test.Xtruct? success;
  t_frugal_test.Xception? err1;
  t_frugal_test.Xception2? err2;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRUCT) {
            final elem70 = t_frugal_test.Xtruct();
            this.success = elem70;
            elem70.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 1:
          if (field.type == thrift.TType.STRUCT) {
            final elem71 = t_frugal_test.Xception();
            this.err1 = elem71;
            elem71.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == thrift.TType.STRUCT) {
            final elem72 = t_frugal_test.Xception2();
            this.err2 = elem72;
            elem72.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testUncaughtException_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testUncaughtException_args');



  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testUncaughtException_result extends frugal.FGeneratedArgsResultBase {


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testUncheckedTApplicationException_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testUncheckedTApplicationException_args');



  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testUncheckedTApplicationException_result extends frugal.FGeneratedArgsResultBase {


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testRequestTooLarge_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testRequestTooLarge_args');
  static final thrift.TField _REQUEST_FIELD_DESC = thrift.TField('request', thrift.TType.STRING, 1);

  Uint8List? request;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem73 = request;
    if (elem73 != null) {
      oprot.writeFieldBegin(_REQUEST_FIELD_DESC);
      oprot.writeBinary(elem73);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testRequestTooLarge_result extends frugal.FGeneratedArgsResultBase {


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testResponseTooLarge_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testResponseTooLarge_args');
  static final thrift.TField _REQUEST_FIELD_DESC = thrift.TField('request', thrift.TType.STRING, 1);

  Uint8List? request;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem74 = request;
    if (elem74 != null) {
      oprot.writeFieldBegin(_REQUEST_FIELD_DESC);
      oprot.writeBinary(elem74);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testResponseTooLarge_result extends frugal.FGeneratedArgsResultBase {
  Uint8List? success;


  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case 0:
          if (field.type == thrift.TType.STRING) {
            this.success = iprot.readBinary();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  validate() {
  }
}
// ignore: camel_case_types
class testOneway_args extends frugal.FGeneratedArgsResultBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('testOneway_args');
  static final thrift.TField _MILLISECONDS_TO_SLEEP_FIELD_DESC = thrift.TField('millisecondsToSleep', thrift.TType.I32, 1);

  int? millisecondsToSleep;


  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem75 = millisecondsToSleep;
    oprot.writeFieldBegin(_MILLISECONDS_TO_SLEEP_FIELD_DESC);
    oprot.writeI32(elem75);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  validate() {
  }
}
