// Mocks generated by Mockito 5.3.2 from annotations
// in frugal/test/transport/f_adapter_transport_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:logging/logging.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:thrift/thrift.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTSocket_1 extends _i1.SmartFake implements _i3.TSocket {
  _FakeTSocket_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TSocketTransport].
///
/// See the documentation for Mockito's code generation for more information.
class MockTSocketTransport extends _i1.Mock implements _i3.TSocketTransport {
  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);
  @override
  _i3.TSocket get socket => (super.noSuchMethod(
        Invocation.getter(#socket),
        returnValue: _FakeTSocket_1(
          this,
          Invocation.getter(#socket),
        ),
        returnValueForMissingStub: _FakeTSocket_1(
          this,
          Invocation.getter(#socket),
        ),
      ) as _i3.TSocket);
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasReadData => (super.noSuchMethod(
        Invocation.getter(#hasReadData),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<dynamic> open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  void handleIncomingMessage(_i5.Uint8List? messageBytes) => super.noSuchMethod(
        Invocation.method(
          #handleIncomingMessage,
          [messageBytes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Uint8List consumeWriteBuffer() => (super.noSuchMethod(
        Invocation.method(
          #consumeWriteBuffer,
          [],
        ),
        returnValue: _i5.Uint8List(0),
        returnValueForMissingStub: _i5.Uint8List(0),
      ) as _i5.Uint8List);
  @override
  int read(
    _i5.Uint8List? buffer,
    int? offset,
    int? length,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [
            buffer,
            offset,
            length,
          ],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  void write(
    _i5.Uint8List? buffer,
    int? offset,
    int? length,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #write,
          [
            buffer,
            offset,
            length,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<dynamic> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  int readAll(
    _i5.Uint8List? buffer,
    int? offset,
    int? length,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [
            buffer,
            offset,
            length,
          ],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  void writeAll(_i5.Uint8List? buffer) => super.noSuchMethod(
        Invocation.method(
          #writeAll,
          [buffer],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockTSocket extends _i1.Mock implements _i3.TSocket {
  @override
  _i4.Stream<_i3.TSocketState> get onState => (super.noSuchMethod(
        Invocation.getter(#onState),
        returnValue: _i4.Stream<_i3.TSocketState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i3.TSocketState>.empty(),
      ) as _i4.Stream<_i3.TSocketState>);
  @override
  _i4.Stream<Object> get onError => (super.noSuchMethod(
        Invocation.getter(#onError),
        returnValue: _i4.Stream<Object>.empty(),
        returnValueForMissingStub: _i4.Stream<Object>.empty(),
      ) as _i4.Stream<Object>);
  @override
  _i4.Stream<_i5.Uint8List> get onMessage => (super.noSuchMethod(
        Invocation.getter(#onMessage),
        returnValue: _i4.Stream<_i5.Uint8List>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.Uint8List>.empty(),
      ) as _i4.Stream<_i5.Uint8List>);
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<dynamic> open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  void send(_i5.Uint8List? data) => super.noSuchMethod(
        Invocation.method(
          #send,
          [data],
        ),
        returnValueForMissingStub: null,
      );
}
