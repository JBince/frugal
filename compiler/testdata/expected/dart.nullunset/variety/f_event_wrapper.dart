// Autogenerated by Frugal Compiler (3.17.12)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

// ignore_for_file: unused_import
// ignore_for_file: unused_field
import 'dart:typed_data' show Uint8List;

import 'package:collection/collection.dart';
import 'package:thrift/thrift.dart' as thrift;
import 'package:variety/variety.dart' as t_variety;
import 'package:actual_base_dart/actual_base_dart.dart' as t_actual_base_dart;
import 'package:intermediate_include/intermediate_include.dart' as t_intermediate_include;
import 'package:validStructs/validStructs.dart' as t_validStructs;
import 'package:ValidTypes/ValidTypes.dart' as t_ValidTypes;
import 'package:subdir_include_ns/subdir_include_ns.dart' as t_subdir_include_ns;

class EventWrapper implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = thrift.TStruct('EventWrapper');
  static final thrift.TField _ID_FIELD_DESC = thrift.TField('ID', thrift.TType.I64, 1);
  static final thrift.TField _EV_FIELD_DESC = thrift.TField('Ev', thrift.TType.STRUCT, 2);
  static final thrift.TField _EVENTS_FIELD_DESC = thrift.TField('Events', thrift.TType.LIST, 3);
  static final thrift.TField _EVENTS2_FIELD_DESC = thrift.TField('Events2', thrift.TType.SET, 4);
  static final thrift.TField _EVENT_MAP_FIELD_DESC = thrift.TField('EventMap', thrift.TType.MAP, 5);
  static final thrift.TField _NUMS_FIELD_DESC = thrift.TField('Nums', thrift.TType.LIST, 6);
  static final thrift.TField _ENUMS_FIELD_DESC = thrift.TField('Enums', thrift.TType.LIST, 7);
  static final thrift.TField _A_BOOL_FIELD_FIELD_DESC = thrift.TField('aBoolField', thrift.TType.BOOL, 8);
  static final thrift.TField _A_UNION_FIELD_DESC = thrift.TField('a_union', thrift.TType.STRUCT, 9);
  static final thrift.TField _TYPEDEF_OF_TYPEDEF_FIELD_DESC = thrift.TField('typedefOfTypedef', thrift.TType.STRING, 10);
  static final thrift.TField _DEPR_FIELD_DESC = thrift.TField('depr', thrift.TType.BOOL, 11);
  static final thrift.TField _DEPR_BINARY_FIELD_DESC = thrift.TField('deprBinary', thrift.TType.STRING, 12);
  static final thrift.TField _DEPR_LIST_FIELD_DESC = thrift.TField('deprList', thrift.TType.LIST, 13);
  static final thrift.TField _EVENTS_DEFAULT_FIELD_DESC = thrift.TField('EventsDefault', thrift.TType.LIST, 14);
  static final thrift.TField _EVENT_MAP_DEFAULT_FIELD_DESC = thrift.TField('EventMapDefault', thrift.TType.MAP, 15);
  static final thrift.TField _EVENT_SET_DEFAULT_FIELD_DESC = thrift.TField('EventSetDefault', thrift.TType.SET, 16);
  static final thrift.TField _EVENTS_REQUIRED_FIELD_DESC = thrift.TField('EventsRequired', thrift.TType.LIST, 17);
  static final thrift.TField _EVENT_MAP_REQUIRED_FIELD_DESC = thrift.TField('EventMapRequired', thrift.TType.MAP, 18);
  static final thrift.TField _EVENT_SET_REQUIRED_FIELD_DESC = thrift.TField('EventSetRequired', thrift.TType.SET, 19);

  int? iD;
  static const int ID = 1;
  t_variety.Event? ev;
  static const int EV = 2;
  List<t_variety.Event>? events;
  static const int EVENTS = 3;
  Set<t_variety.Event>? events2;
  static const int EVENTS2 = 4;
  Map<int, t_variety.Event>? eventMap;
  static const int EVENTMAP = 5;
  List<List<int>>? nums;
  static const int NUMS = 6;
  List<int>? enums;
  static const int ENUMS = 7;
  bool? aBoolField;
  static const int ABOOLFIELD = 8;
  t_variety.TestingUnions? a_union;
  static const int A_UNION = 9;
  String? typedefOfTypedef;
  static const int TYPEDEFOFTYPEDEF = 10;
  /// This is a docstring comment for a deprecated field that has been spread
  /// across two lines.
  /// Deprecated: use something else
  @deprecated
  bool? depr;
  static const int DEPR = 11;
  /// Deprecated: use something else
  @deprecated
  Uint8List? deprBinary;
  static const int DEPRBINARY = 12;
  /// Deprecated: use something else
  @deprecated
  List<bool>? deprList;
  static const int DEPRLIST = 13;
  List<t_variety.Event>? eventsDefault = [
    ];
  static const int EVENTSDEFAULT = 14;
  Map<int, t_variety.Event>? eventMapDefault = {
    };
  static const int EVENTMAPDEFAULT = 15;
  Set<t_variety.Event>? eventSetDefault = Set<t_variety.Event>.from([
    ]);
  static const int EVENTSETDEFAULT = 16;
  List<t_variety.Event>? eventsRequired = [
    ];
  static const int EVENTSREQUIRED = 17;
  Map<int, t_variety.Event>? eventMapRequired = {
    };
  static const int EVENTMAPREQUIRED = 18;
  Set<t_variety.Event>? eventSetRequired = Set<t_variety.Event>.from([
    ]);
  static const int EVENTSETREQUIRED = 19;


  bool isSetID() => this.iD != null;

  unsetID() {
    this.iD = null;
  }

  bool isSetEv() => this.ev != null;

  unsetEv() {
    this.ev = null;
  }

  bool isSetEvents() => this.events != null;

  unsetEvents() {
    this.events = null;
  }

  bool isSetEvents2() => this.events2 != null;

  unsetEvents2() {
    this.events2 = null;
  }

  bool isSetEventMap() => this.eventMap != null;

  unsetEventMap() {
    this.eventMap = null;
  }

  bool isSetNums() => this.nums != null;

  unsetNums() {
    this.nums = null;
  }

  bool isSetEnums() => this.enums != null;

  unsetEnums() {
    this.enums = null;
  }

  bool isSetABoolField() => this.aBoolField != null;

  unsetABoolField() {
    this.aBoolField = null;
  }

  bool isSetA_union() => this.a_union != null;

  unsetA_union() {
    this.a_union = null;
  }

  bool isSetTypedefOfTypedef() => this.typedefOfTypedef != null;

  unsetTypedefOfTypedef() {
    this.typedefOfTypedef = null;
  }

  @deprecated  bool isSetDepr() => this.depr != null;

  unsetDepr() {
    // ignore: deprecated_member_use
    this.depr = null;
  }

  @deprecated  bool isSetDeprBinary() => this.deprBinary != null;

  unsetDeprBinary() {
    // ignore: deprecated_member_use
    this.deprBinary = null;
  }

  @deprecated  bool isSetDeprList() => this.deprList != null;

  unsetDeprList() {
    // ignore: deprecated_member_use
    this.deprList = null;
  }

  bool isSetEventsDefault() => this.eventsDefault != null;

  unsetEventsDefault() {
    this.eventsDefault = null;
  }

  bool isSetEventMapDefault() => this.eventMapDefault != null;

  unsetEventMapDefault() {
    this.eventMapDefault = null;
  }

  bool isSetEventSetDefault() => this.eventSetDefault != null;

  unsetEventSetDefault() {
    this.eventSetDefault = null;
  }

  bool isSetEventsRequired() => this.eventsRequired != null;

  unsetEventsRequired() {
    this.eventsRequired = null;
  }

  bool isSetEventMapRequired() => this.eventMapRequired != null;

  unsetEventMapRequired() {
    this.eventMapRequired = null;
  }

  bool isSetEventSetRequired() => this.eventSetRequired != null;

  unsetEventSetRequired() {
    this.eventSetRequired = null;
  }

  @override
  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.iD;
      case EV:
        return this.ev;
      case EVENTS:
        return this.events;
      case EVENTS2:
        return this.events2;
      case EVENTMAP:
        return this.eventMap;
      case NUMS:
        return this.nums;
      case ENUMS:
        return this.enums;
      case ABOOLFIELD:
        return this.aBoolField;
      case A_UNION:
        return this.a_union;
      case TYPEDEFOFTYPEDEF:
        return this.typedefOfTypedef;
      case DEPR:
        // ignore: deprecated_member_use
        return this.depr;
      case DEPRBINARY:
        // ignore: deprecated_member_use
        return this.deprBinary;
      case DEPRLIST:
        // ignore: deprecated_member_use
        return this.deprList;
      case EVENTSDEFAULT:
        return this.eventsDefault;
      case EVENTMAPDEFAULT:
        return this.eventMapDefault;
      case EVENTSETDEFAULT:
        return this.eventSetDefault;
      case EVENTSREQUIRED:
        return this.eventsRequired;
      case EVENTMAPREQUIRED:
        return this.eventMapRequired;
      case EVENTSETREQUIRED:
        return this.eventSetRequired;
      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  @override
  setFieldValue(int fieldID, Object? value) {
    switch (fieldID) {
      case ID:
        this.iD = value as int?;
        break;

      case EV:
        this.ev = value as t_variety.Event?;
        break;

      case EVENTS:
        this.events = value as List<t_variety.Event>?;
        break;

      case EVENTS2:
        this.events2 = value as Set<t_variety.Event>?;
        break;

      case EVENTMAP:
        this.eventMap = value as Map<int, t_variety.Event>?;
        break;

      case NUMS:
        this.nums = value as List<List<int>>?;
        break;

      case ENUMS:
        this.enums = value as List<int>?;
        break;

      case ABOOLFIELD:
        this.aBoolField = value as bool?;
        break;

      case A_UNION:
        this.a_union = value as t_variety.TestingUnions?;
        break;

      case TYPEDEFOFTYPEDEF:
        this.typedefOfTypedef = value as String?;
        break;

      case DEPR:
        // ignore: deprecated_member_use
        this.depr = value as bool?;
        break;

      case DEPRBINARY:
        // ignore: deprecated_member_use
        this.deprBinary = value as Uint8List?;
        break;

      case DEPRLIST:
        // ignore: deprecated_member_use
        this.deprList = value as List<bool>?;
        break;

      case EVENTSDEFAULT:
        this.eventsDefault = value as List<t_variety.Event>?;
        break;

      case EVENTMAPDEFAULT:
        this.eventMapDefault = value as Map<int, t_variety.Event>?;
        break;

      case EVENTSETDEFAULT:
        this.eventSetDefault = value as Set<t_variety.Event>?;
        break;

      case EVENTSREQUIRED:
        this.eventsRequired = value as List<t_variety.Event>?;
        break;

      case EVENTMAPREQUIRED:
        this.eventMapRequired = value as Map<int, t_variety.Event>?;
        break;

      case EVENTSETREQUIRED:
        this.eventSetRequired = value as Set<t_variety.Event>?;
        break;

      default:
        throw ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  @override
  bool isSet(int fieldID) {
    return getFieldValue(fieldID) != null;
  }

  @override
  read(thrift.TProtocol iprot) {
    iprot.readStructBegin();
    for (thrift.TField field = iprot.readFieldBegin();
        field.type != thrift.TType.STOP;
        field = iprot.readFieldBegin()) {
      switch (field.id) {
        case ID:
          if (field.type == thrift.TType.I64) {
            this.iD = iprot.readI64();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EV:
          if (field.type == thrift.TType.STRUCT) {
            final elem0 = t_variety.Event();
            this.ev = elem0;
            elem0.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTS:
          if (field.type == thrift.TType.LIST) {
            thrift.TList elem1 = iprot.readListBegin();
            final elem5 = <t_variety.Event>[];
            for(int elem4 = 0; elem4 < elem1.length; ++elem4) {
              final elem3 = t_variety.Event();
              t_variety.Event elem2 = elem3;
              elem3.read(iprot);
              elem5.add(elem2);
            }
            iprot.readListEnd();
            this.events = elem5;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTS2:
          if (field.type == thrift.TType.SET) {
            thrift.TSet elem6 = iprot.readSetBegin();
            final elem10 = <t_variety.Event>{};
            for(int elem9 = 0; elem9 < elem6.length; ++elem9) {
              final elem8 = t_variety.Event();
              t_variety.Event elem7 = elem8;
              elem8.read(iprot);
              elem10.add(elem7);
            }
            iprot.readSetEnd();
            this.events2 = elem10;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTMAP:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem11 = iprot.readMapBegin();
            final elem15 = <int, t_variety.Event>{};
            for(int elem14 = 0; elem14 < elem11.length; ++elem14) {
              int elem16 = iprot.readI64();
              final elem13 = t_variety.Event();
              t_variety.Event elem12 = elem13;
              elem13.read(iprot);
              elem15[elem16] = elem12;
            }
            iprot.readMapEnd();
            this.eventMap = elem15;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUMS:
          if (field.type == thrift.TType.LIST) {
            thrift.TList elem17 = iprot.readListBegin();
            final elem23 = <List<int>>[];
            for(int elem22 = 0; elem22 < elem17.length; ++elem22) {
              thrift.TList elem19 = iprot.readListBegin();
              final elem18 = <int>[];
              for(int elem21 = 0; elem21 < elem19.length; ++elem21) {
                int elem20 = iprot.readI32();
                elem18.add(elem20);
              }
              iprot.readListEnd();
              elem23.add(elem18);
            }
            iprot.readListEnd();
            this.nums = elem23;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENUMS:
          if (field.type == thrift.TType.LIST) {
            thrift.TList elem24 = iprot.readListBegin();
            final elem27 = <int>[];
            for(int elem26 = 0; elem26 < elem24.length; ++elem26) {
              int elem25 = iprot.readI32();
              elem27.add(elem25);
            }
            iprot.readListEnd();
            this.enums = elem27;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ABOOLFIELD:
          if (field.type == thrift.TType.BOOL) {
            this.aBoolField = iprot.readBool();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case A_UNION:
          if (field.type == thrift.TType.STRUCT) {
            final elem28 = t_variety.TestingUnions();
            this.a_union = elem28;
            elem28.read(iprot);
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TYPEDEFOFTYPEDEF:
          if (field.type == thrift.TType.STRING) {
            this.typedefOfTypedef = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEPR:
          if (field.type == thrift.TType.BOOL) {
            // ignore: deprecated_member_use
            this.depr = iprot.readBool();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEPRBINARY:
          if (field.type == thrift.TType.STRING) {
            // ignore: deprecated_member_use
            this.deprBinary = iprot.readBinary();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEPRLIST:
          if (field.type == thrift.TType.LIST) {
            thrift.TList elem29 = iprot.readListBegin();
            // ignore: deprecated_member_use
            final elem32 = <bool>[];
            for(int elem31 = 0; elem31 < elem29.length; ++elem31) {
              bool elem30 = iprot.readBool();
              // ignore: deprecated_member_use
              elem32.add(elem30);
            }
            iprot.readListEnd();
            this.deprList = elem32;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTSDEFAULT:
          if (field.type == thrift.TType.LIST) {
            thrift.TList elem33 = iprot.readListBegin();
            final elem37 = <t_variety.Event>[];
            for(int elem36 = 0; elem36 < elem33.length; ++elem36) {
              final elem35 = t_variety.Event();
              t_variety.Event elem34 = elem35;
              elem35.read(iprot);
              elem37.add(elem34);
            }
            iprot.readListEnd();
            this.eventsDefault = elem37;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTMAPDEFAULT:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem38 = iprot.readMapBegin();
            final elem42 = <int, t_variety.Event>{};
            for(int elem41 = 0; elem41 < elem38.length; ++elem41) {
              int elem43 = iprot.readI64();
              final elem40 = t_variety.Event();
              t_variety.Event elem39 = elem40;
              elem40.read(iprot);
              elem42[elem43] = elem39;
            }
            iprot.readMapEnd();
            this.eventMapDefault = elem42;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTSETDEFAULT:
          if (field.type == thrift.TType.SET) {
            thrift.TSet elem44 = iprot.readSetBegin();
            final elem48 = <t_variety.Event>{};
            for(int elem47 = 0; elem47 < elem44.length; ++elem47) {
              final elem46 = t_variety.Event();
              t_variety.Event elem45 = elem46;
              elem46.read(iprot);
              elem48.add(elem45);
            }
            iprot.readSetEnd();
            this.eventSetDefault = elem48;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTSREQUIRED:
          if (field.type == thrift.TType.LIST) {
            thrift.TList elem49 = iprot.readListBegin();
            final elem53 = <t_variety.Event>[];
            for(int elem52 = 0; elem52 < elem49.length; ++elem52) {
              final elem51 = t_variety.Event();
              t_variety.Event elem50 = elem51;
              elem51.read(iprot);
              elem53.add(elem50);
            }
            iprot.readListEnd();
            this.eventsRequired = elem53;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTMAPREQUIRED:
          if (field.type == thrift.TType.MAP) {
            thrift.TMap elem54 = iprot.readMapBegin();
            final elem58 = <int, t_variety.Event>{};
            for(int elem57 = 0; elem57 < elem54.length; ++elem57) {
              int elem59 = iprot.readI64();
              final elem56 = t_variety.Event();
              t_variety.Event elem55 = elem56;
              elem56.read(iprot);
              elem58[elem59] = elem55;
            }
            iprot.readMapEnd();
            this.eventMapRequired = elem58;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTSETREQUIRED:
          if (field.type == thrift.TType.SET) {
            thrift.TSet elem60 = iprot.readSetBegin();
            final elem64 = <t_variety.Event>{};
            for(int elem63 = 0; elem63 < elem60.length; ++elem63) {
              final elem62 = t_variety.Event();
              t_variety.Event elem61 = elem62;
              elem62.read(iprot);
              elem64.add(elem61);
            }
            iprot.readSetEnd();
            this.eventSetRequired = elem64;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  @override
  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    final elem65 = iD;
    if (elem65 != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeI64(elem65);
      oprot.writeFieldEnd();
    }
    final elem66 = ev!;
    oprot.writeFieldBegin(_EV_FIELD_DESC);
    elem66.write(oprot);
    oprot.writeFieldEnd();
    final elem67 = events;
    if (elem67 != null) {
      oprot.writeFieldBegin(_EVENTS_FIELD_DESC);
      oprot.writeListBegin(thrift.TList(thrift.TType.STRUCT, elem67.length));
      for(var elem68 in elem67) {
        elem68.write(oprot);
      }
      oprot.writeListEnd();
      oprot.writeFieldEnd();
    }
    final elem69 = events2;
    if (elem69 != null) {
      oprot.writeFieldBegin(_EVENTS2_FIELD_DESC);
      oprot.writeSetBegin(thrift.TSet(thrift.TType.STRUCT, elem69.length));
      for(var elem70 in elem69) {
        elem70.write(oprot);
      }
      oprot.writeSetEnd();
      oprot.writeFieldEnd();
    }
    final elem71 = eventMap;
    if (elem71 != null) {
      oprot.writeFieldBegin(_EVENT_MAP_FIELD_DESC);
      oprot.writeMapBegin(thrift.TMap(thrift.TType.I64, thrift.TType.STRUCT, elem71.length));
      for(var entry in elem71.entries) {
        oprot.writeI64(entry.key);
        entry.value.write(oprot);
      }
      oprot.writeMapEnd();
      oprot.writeFieldEnd();
    }
    final elem72 = nums;
    if (elem72 != null) {
      oprot.writeFieldBegin(_NUMS_FIELD_DESC);
      oprot.writeListBegin(thrift.TList(thrift.TType.LIST, elem72.length));
      for(var elem73 in elem72) {
        oprot.writeListBegin(thrift.TList(thrift.TType.I32, elem73.length));
        for(var elem74 in elem73) {
          oprot.writeI32(elem74);
        }
        oprot.writeListEnd();
      }
      oprot.writeListEnd();
      oprot.writeFieldEnd();
    }
    final elem75 = enums;
    if (elem75 != null) {
      oprot.writeFieldBegin(_ENUMS_FIELD_DESC);
      oprot.writeListBegin(thrift.TList(thrift.TType.I32, elem75.length));
      for(var elem76 in elem75) {
        oprot.writeI32(elem76);
      }
      oprot.writeListEnd();
      oprot.writeFieldEnd();
    }
    final elem77 = aBoolField;
    oprot.writeFieldBegin(_A_BOOL_FIELD_FIELD_DESC);
    oprot.writeBool(elem77);
    oprot.writeFieldEnd();
    final elem78 = a_union;
    if (elem78 != null) {
      oprot.writeFieldBegin(_A_UNION_FIELD_DESC);
      elem78.write(oprot);
      oprot.writeFieldEnd();
    }
    final elem79 = typedefOfTypedef;
    if (elem79 != null) {
      oprot.writeFieldBegin(_TYPEDEF_OF_TYPEDEF_FIELD_DESC);
      oprot.writeString(elem79);
      oprot.writeFieldEnd();
    }
    final elem80 = depr;
    oprot.writeFieldBegin(_DEPR_FIELD_DESC);
    oprot.writeBool(elem80);
    oprot.writeFieldEnd();
    final elem81 = deprBinary;
    // ignore: deprecated_member_use
    if (elem81 != null) {
      oprot.writeFieldBegin(_DEPR_BINARY_FIELD_DESC);
      oprot.writeBinary(elem81);
      oprot.writeFieldEnd();
    }
    final elem82 = deprList;
    // ignore: deprecated_member_use
    if (elem82 != null) {
      oprot.writeFieldBegin(_DEPR_LIST_FIELD_DESC);
      oprot.writeListBegin(thrift.TList(thrift.TType.BOOL, elem82.length));
      for(var elem83 in elem82) {
        oprot.writeBool(elem83);
      }
      oprot.writeListEnd();
      oprot.writeFieldEnd();
    }
    final elem84 = eventsDefault;
    if (elem84 != null) {
      oprot.writeFieldBegin(_EVENTS_DEFAULT_FIELD_DESC);
      oprot.writeListBegin(thrift.TList(thrift.TType.STRUCT, elem84.length));
      for(var elem85 in elem84) {
        elem85.write(oprot);
      }
      oprot.writeListEnd();
      oprot.writeFieldEnd();
    }
    final elem86 = eventMapDefault;
    if (elem86 != null) {
      oprot.writeFieldBegin(_EVENT_MAP_DEFAULT_FIELD_DESC);
      oprot.writeMapBegin(thrift.TMap(thrift.TType.I64, thrift.TType.STRUCT, elem86.length));
      for(var entry in elem86.entries) {
        oprot.writeI64(entry.key);
        entry.value.write(oprot);
      }
      oprot.writeMapEnd();
      oprot.writeFieldEnd();
    }
    final elem87 = eventSetDefault;
    if (elem87 != null) {
      oprot.writeFieldBegin(_EVENT_SET_DEFAULT_FIELD_DESC);
      oprot.writeSetBegin(thrift.TSet(thrift.TType.STRUCT, elem87.length));
      for(var elem88 in elem87) {
        elem88.write(oprot);
      }
      oprot.writeSetEnd();
      oprot.writeFieldEnd();
    }
    final elem89 = eventsRequired!;
    oprot.writeFieldBegin(_EVENTS_REQUIRED_FIELD_DESC);
    oprot.writeListBegin(thrift.TList(thrift.TType.STRUCT, elem89.length));
    for(var elem90 in elem89) {
      elem90.write(oprot);
    }
    oprot.writeListEnd();
    oprot.writeFieldEnd();
    final elem91 = eventMapRequired!;
    oprot.writeFieldBegin(_EVENT_MAP_REQUIRED_FIELD_DESC);
    oprot.writeMapBegin(thrift.TMap(thrift.TType.I64, thrift.TType.STRUCT, elem91.length));
    for(var entry in elem91.entries) {
      oprot.writeI64(entry.key);
      entry.value.write(oprot);
    }
    oprot.writeMapEnd();
    oprot.writeFieldEnd();
    final elem92 = eventSetRequired!;
    oprot.writeFieldBegin(_EVENT_SET_REQUIRED_FIELD_DESC);
    oprot.writeSetBegin(thrift.TSet(thrift.TType.STRUCT, elem92.length));
    for(var elem93 in elem92) {
      elem93.write(oprot);
    }
    oprot.writeSetEnd();
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @override
  String toString() {
    StringBuffer ret = StringBuffer('EventWrapper(');

    if (isSetID()) {
      ret.write('iD:');
      ret.write(this.iD);
    }

    ret.write(', ');
    ret.write('ev:');
    if (this.ev == null) {
      ret.write('null');
    } else {
      ret.write(this.ev);
    }

    ret.write(', ');
    ret.write('events:');
    if (this.events == null) {
      ret.write('null');
    } else {
      ret.write(this.events);
    }

    ret.write(', ');
    ret.write('events2:');
    if (this.events2 == null) {
      ret.write('null');
    } else {
      ret.write(this.events2);
    }

    ret.write(', ');
    ret.write('eventMap:');
    if (this.eventMap == null) {
      ret.write('null');
    } else {
      ret.write(this.eventMap);
    }

    ret.write(', ');
    ret.write('nums:');
    if (this.nums == null) {
      ret.write('null');
    } else {
      ret.write(this.nums);
    }

    ret.write(', ');
    ret.write('enums:');
    if (this.enums == null) {
      ret.write('null');
    } else {
      ret.write(this.enums);
    }

    ret.write(', ');
    ret.write('aBoolField:');
    ret.write(this.aBoolField);

    ret.write(', ');
    ret.write('a_union:');
    if (this.a_union == null) {
      ret.write('null');
    } else {
      ret.write(this.a_union);
    }

    ret.write(', ');
    ret.write('typedefOfTypedef:');
    if (this.typedefOfTypedef == null) {
      ret.write('null');
    } else {
      ret.write(this.typedefOfTypedef);
    }

    ret.write(', ');
    ret.write('depr:');
    // ignore: deprecated_member_use
    ret.write(this.depr);

    ret.write(', ');
    ret.write('deprBinary:');
    // ignore: deprecated_member_use
    if (this.deprBinary == null) {
      ret.write('null');
    } else {
      ret.write('BINARY');
    }

    ret.write(', ');
    ret.write('deprList:');
    // ignore: deprecated_member_use
    if (this.deprList == null) {
      ret.write('null');
    } else {
      // ignore: deprecated_member_use
      ret.write(this.deprList);
    }

    if (isSetEventsDefault()) {
      ret.write(', ');
      ret.write('eventsDefault:');
      if (this.eventsDefault == null) {
        ret.write('null');
      } else {
        ret.write(this.eventsDefault);
      }
    }

    if (isSetEventMapDefault()) {
      ret.write(', ');
      ret.write('eventMapDefault:');
      if (this.eventMapDefault == null) {
        ret.write('null');
      } else {
        ret.write(this.eventMapDefault);
      }
    }

    if (isSetEventSetDefault()) {
      ret.write(', ');
      ret.write('eventSetDefault:');
      if (this.eventSetDefault == null) {
        ret.write('null');
      } else {
        ret.write(this.eventSetDefault);
      }
    }

    ret.write(', ');
    ret.write('eventsRequired:');
    if (this.eventsRequired == null) {
      ret.write('null');
    } else {
      ret.write(this.eventsRequired);
    }

    ret.write(', ');
    ret.write('eventMapRequired:');
    if (this.eventMapRequired == null) {
      ret.write('null');
    } else {
      ret.write(this.eventMapRequired);
    }

    ret.write(', ');
    ret.write('eventSetRequired:');
    if (this.eventSetRequired == null) {
      ret.write('null');
    } else {
      ret.write(this.eventSetRequired);
    }

    ret.write(')');

    return ret.toString();
  }

  @override
  bool operator ==(Object o) {
    if (o is EventWrapper) {
      return this.iD == o.iD &&
        this.ev == o.ev &&
        DeepCollectionEquality().equals(this.events, o.events) &&
        DeepCollectionEquality().equals(this.events2, o.events2) &&
        DeepCollectionEquality().equals(this.eventMap, o.eventMap) &&
        DeepCollectionEquality().equals(this.nums, o.nums) &&
        DeepCollectionEquality().equals(this.enums, o.enums) &&
        this.aBoolField == o.aBoolField &&
        this.a_union == o.a_union &&
        this.typedefOfTypedef == o.typedefOfTypedef &&
        // ignore: deprecated_member_use
        this.depr == o.depr &&
        // ignore: deprecated_member_use
        this.deprBinary == o.deprBinary &&
        // ignore: deprecated_member_use
        DeepCollectionEquality().equals(this.deprList, o.deprList) &&
        DeepCollectionEquality().equals(this.eventsDefault, o.eventsDefault) &&
        DeepCollectionEquality().equals(this.eventMapDefault, o.eventMapDefault) &&
        DeepCollectionEquality().equals(this.eventSetDefault, o.eventSetDefault) &&
        DeepCollectionEquality().equals(this.eventsRequired, o.eventsRequired) &&
        DeepCollectionEquality().equals(this.eventMapRequired, o.eventMapRequired) &&
        DeepCollectionEquality().equals(this.eventSetRequired, o.eventSetRequired);
    }
    return false;
  }

  @override
  int get hashCode {
    var value = 17;
    value = (value * 31) ^ this.iD.hashCode;
    value = (value * 31) ^ this.ev.hashCode;
    value = (value * 31) ^ DeepCollectionEquality().hash(this.events);
    value = (value * 31) ^ DeepCollectionEquality().hash(this.events2);
    value = (value * 31) ^ DeepCollectionEquality().hash(this.eventMap);
    value = (value * 31) ^ DeepCollectionEquality().hash(this.nums);
    value = (value * 31) ^ DeepCollectionEquality().hash(this.enums);
    value = (value * 31) ^ this.aBoolField.hashCode;
    value = (value * 31) ^ this.a_union.hashCode;
    value = (value * 31) ^ this.typedefOfTypedef.hashCode;
    // ignore: deprecated_member_use
    value = (value * 31) ^ this.depr.hashCode;
    // ignore: deprecated_member_use
    value = (value * 31) ^ this.deprBinary.hashCode;
    // ignore: deprecated_member_use
    value = (value * 31) ^ DeepCollectionEquality().hash(this.deprList);
    value = (value * 31) ^ DeepCollectionEquality().hash(this.eventsDefault);
    value = (value * 31) ^ DeepCollectionEquality().hash(this.eventMapDefault);
    value = (value * 31) ^ DeepCollectionEquality().hash(this.eventSetDefault);
    value = (value * 31) ^ DeepCollectionEquality().hash(this.eventsRequired);
    value = (value * 31) ^ DeepCollectionEquality().hash(this.eventMapRequired);
    value = (value * 31) ^ DeepCollectionEquality().hash(this.eventSetRequired);
    return value;
  }

  EventWrapper clone({
    int? iD,
    t_variety.Event? ev,
    List<t_variety.Event>? events,
    Set<t_variety.Event>? events2,
    Map<int, t_variety.Event>? eventMap,
    List<List<int>>? nums,
    List<int>? enums,
    bool? aBoolField,
    t_variety.TestingUnions? a_union,
    String? typedefOfTypedef,
    // ignore: deprecated_member_use
    bool? depr,
    // ignore: deprecated_member_use
    Uint8List? deprBinary,
    // ignore: deprecated_member_use
    List<bool>? deprList,
    List<t_variety.Event>? eventsDefault,
    Map<int, t_variety.Event>? eventMapDefault,
    Set<t_variety.Event>? eventSetDefault,
    List<t_variety.Event>? eventsRequired,
    Map<int, t_variety.Event>? eventMapRequired,
    Set<t_variety.Event>? eventSetRequired,
  }) {
    return EventWrapper()
      ..iD = iD ?? this.iD
      ..ev = ev ?? this.ev
      ..events = events ?? this.events
      ..events2 = events2 ?? this.events2
      ..eventMap = eventMap ?? this.eventMap
      ..nums = nums ?? this.nums
      ..enums = enums ?? this.enums
      ..aBoolField = aBoolField ?? this.aBoolField
      ..a_union = a_union ?? this.a_union
      ..typedefOfTypedef = typedefOfTypedef ?? this.typedefOfTypedef
      // ignore: deprecated_member_use
      ..depr = depr ?? this.depr
      // ignore: deprecated_member_use
      ..deprBinary = deprBinary ?? this.deprBinary
      // ignore: deprecated_member_use
      ..deprList = deprList ?? this.deprList
      ..eventsDefault = eventsDefault ?? this.eventsDefault
      ..eventMapDefault = eventMapDefault ?? this.eventMapDefault
      ..eventSetDefault = eventSetDefault ?? this.eventSetDefault
      ..eventsRequired = eventsRequired ?? this.eventsRequired
      ..eventMapRequired = eventMapRequired ?? this.eventMapRequired
      ..eventSetRequired = eventSetRequired ?? this.eventSetRequired;
  }

  validate() {
    // check for required fields
    if (this.ev == null) {
      throw thrift.TProtocolError(thrift.TProtocolErrorType.INVALID_DATA, "Required field 'ev' was not present in struct EventWrapper");
    }
    if (this.eventsRequired == null) {
      throw thrift.TProtocolError(thrift.TProtocolErrorType.INVALID_DATA, "Required field 'eventsRequired' was not present in struct EventWrapper");
    }
    if (this.eventMapRequired == null) {
      throw thrift.TProtocolError(thrift.TProtocolErrorType.INVALID_DATA, "Required field 'eventMapRequired' was not present in struct EventWrapper");
    }
    if (this.eventSetRequired == null) {
      throw thrift.TProtocolError(thrift.TProtocolErrorType.INVALID_DATA, "Required field 'eventSetRequired' was not present in struct EventWrapper");
    }
  }
}
